name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
        pip install -r requirements.txt
    
    - name: Run Black (Code Formatting)
      run: black --check --diff src/ *.py
    
    - name: Run Flake8 (Linting)
      run: flake8 src/ *.py --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (Type Checking)
      run: mypy src/ --ignore-missing-imports --no-strict-optional

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']
        exclude:
          # Exclude some combinations to reduce matrix size
          - os: macos-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.8
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
    
    - name: Install package
      run: pip install -e .
    
    - name: Run basic import tests
      run: |
        python -c "import src.core.environment; print('✓ Core environment imports')"
        python -c "import src.core.gym_wrapper; print('✓ Gym wrapper imports')"
        python -c "import src.training.trainer; print('✓ Training module imports')"
        python -c "import src.evaluation.evaluator; print('✓ Evaluation module imports')"
    
    - name: Test environment creation
      run: |
        python -c "
        from src.core.environment import learning_grid_sarsa_0
        qobj = learning_grid_sarsa_0(999, 5, 3, [0.3, 0.6, 0.9], 3, 3, 1, 1)
        print('✓ Environment creation test passed')
        print(f'Grid size: {qobj.N}x{qobj.N}')
        print(f'Missing state: {qobj.missing_state}')
        "
    
    # Note: Pygame tests are skipped on CI since they require display
    - name: Test visualization imports (headless)
      run: |
        python -c "
        try:
            from src.visualization.renderer import TrackingRenderer
            print('✓ Visualization renderer imported successfully')
        except ImportError as e:
            print(f'⚠ Visualization imports failed (expected on headless CI): {e}')
        "
    
    - name: Test example script imports
      run: |
        python -c "
        from examples.basic_training import main as basic_main
        from examples.custom_environment import main as custom_main
        print('✓ Example scripts import successfully')
        print('✓ All main functions are accessible')
        "

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Test minimal training loop
      run: |
        python -c "
        import ray
        from src.core.environment import learning_grid_sarsa_0
        from src.core.gym_wrapper import grid_environment
        from ray.rllib.algorithms.a2c import A2CConfig
        
        print('Testing minimal training setup...')
        
        # Create small environment for testing
        qobj = learning_grid_sarsa_0(999, 3, 2, [0.5, 1.0], 2, 2, 1, 1)
        env_config = {'qobj': qobj, 'time_limit_schedule': [100], 'time_limit_max': 1}
        
        # Initialize Ray
        ray.init(ignore_reinit_error=True)
        
        try:
            # Create A2C config
            config = A2CConfig()
            config = config.environment(grid_environment, env_config=env_config)
            config = config.training(lr=0.001, grad_clip=30.0)
            config = config.resources(num_gpus=0)
            config = config.rollouts(num_rollout_workers=0)
            
            # Build algorithm
            algo = config.build()
            
            # Run a few training iterations
            for i in range(3):
                result = algo.train()
                print(f'Iteration {i+1}: reward_mean = {result[\"episode_reward_mean\"]:.4f}')
            
            print('✓ Minimal training test passed')
            
        finally:
            ray.shutdown()
        "
    
    - name: Test evaluation functionality
      run: |
        python -c "
        from src.core.environment import learning_grid_sarsa_0
        from src.evaluation.evaluator import evaluate_policy_detailed
        import numpy as np
        
        print('Testing evaluation functionality...')
        
        # Create mock environment and policy
        qobj = learning_grid_sarsa_0(999, 3, 2, [0.5, 1.0], 2, 2, 1, 1)
        
        # Mock algorithm that returns random actions
        class MockAlgo:
            def compute_single_action(self, obs, explore=True):
                return np.random.randint(0, 2, size=9)  # 3x3 sensor grid
        
        mock_algo = MockAlgo()
        
        # Test evaluation (just a few episodes for speed)
        print('Running mock evaluation...')
        summary = evaluate_policy_detailed(mock_algo, qobj.grid_env, num_episodes=5)
        
        print(f'✓ Evaluation test passed')
        print(f'Mean success rate: {summary[\"mean_success_rate\"]:.4f}')
        print(f'Mean episode length: {summary[\"mean_episode_length\"]:.2f}')
        "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run Safety (Dependency Security Check)
      run: safety check --json || true  # Don't fail the build on security issues
    
    - name: Run Bandit (Code Security Analysis)
      run: bandit -r src/ -f json || true  # Don't fail the build on security issues

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt
    
    - name: Check README
      run: |
        python -c "
        import os
        with open('README.md', 'r') as f:
            content = f.read()
            print(f'README.md has {len(content)} characters')
            assert len(content) > 1000, 'README.md seems too short'
            assert '# Track-MDP' in content, 'README.md missing title'
            assert 'Installation' in content, 'README.md missing installation section'
            print('✓ README.md validation passed')
        "
    
    - name: Validate package metadata
      run: |
        python setup.py check --metadata --strict
        echo "✓ Package metadata validation passed"